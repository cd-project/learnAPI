basePath: /
definitions:
  controller.LoginPayload:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  model.Board:
    properties:
      description:
        type: string
      id:
        type: integer
      profileID:
        type: integer
      title:
        type: string
    type: object
  model.LoginResponse:
    properties:
      code:
        type: string
      data:
        type: object
      message:
        type: string
      refreshToken:
        type: string
      success:
        type: boolean
      token:
        type: string
    type: object
  model.Response:
    properties:
      code:
        type: string
      data:
        type: object
      message:
        type: string
      success:
        type: boolean
    type: object
  model.Todo:
    properties:
      boardID:
        description: "BoardID \tid of board which has this todo."
        type: integer
      description:
        type: string
      finished:
        type: boolean
      id:
        type: integer
      title:
        type: string
    type: object
  model.UserPayload:
    properties:
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Swagger
  version: "1.0"
paths:
  /board/{boardid}/update:
    put:
      consumes:
      - application/json
      description: given new data and id, update board
      parameters:
      - description: ID of the to be updated board
        in: path
        name: boardid
        required: true
        type: integer
      - description: Update content
        in: body
        name: UpdateContent
        required: true
        schema:
          $ref: '#/definitions/model.Board'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: get board updated with new data
      tags:
      - board-manager-apis
  /board/{uid}/allBoard:
    get:
      consumes:
      - application/json
      description: gets all board belong to UserID
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: gets all board belong to UserID
      tags:
      - board-manager-apis
  /board/{uid}/create:
    post:
      consumes:
      - application/json
      description: create a new board with given model
      parameters:
      - description: Owner of this board
        in: path
        name: uid
        required: true
        type: integer
      - description: Board information
        in: body
        name: BoardInfo
        required: true
        schema:
          $ref: '#/definitions/model.Board'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: create new Board with given model
      tags:
      - board-manager-apis
  /board/delete/{boardid}:
    delete:
      consumes:
      - application/json
      description: Board with boardID will be deleted
      parameters:
      - description: ID of the to be deleted board
        in: path
        name: boardid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Board with boardID will be deleted
      tags:
      - board-manager-apis
  /sys/allBoard:
    get:
      consumes:
      - application/json
      description: get all boards
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: get all boards
      tags:
      - board-manager-apis
  /sys/filter:
    put:
      consumes:
      - application/json
      description: |-
        board db will be filtered using given model
        json
      parameters:
      - description: Filter Content
        in: body
        name: FilterContent
        required: true
        schema:
          $ref: '#/definitions/model.Board'
      responses:
        "200":
          description: ""
      summary: filtered data will be shown
      tags:
      - board-manager-apis
  /user/{uid}:
    get:
      consumes:
      - application/json
      description: gets user info
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: gets user info
      tags:
      - user-manager-apis
  /user/all:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      summary: get all users
      tags:
      - user-manager-apis
  /user/create:
    post:
      consumes:
      - application/json
      description: creates new user
      parameters:
      - description: User information
        in: body
        name: UserInfo
        required: true
        schema:
          $ref: '#/definitions/model.UserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - ApiKeyAuth: []
      summary: creates new user
      tags:
      - user-manager-apis
  /user/login:
    post:
      consumes:
      - application/json
      description: log user in
      parameters:
      - description: username & password
        in: body
        name: LoginPayload
        required: true
        schema:
          $ref: '#/definitions/controller.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: log user in
      tags:
      - user-manager-apis
  /user/login/token:
    post:
      consumes:
      - application/json
      description: login user, return new token string jwt
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResponse'
      summary: login user
      tags:
      - user-manager-apis
  /work/all:
    get:
      consumes:
      - application/json
      description: Get all Todos
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Get all Todos
      tags:
      - todo-manager-apis
  /work/create:
    post:
      consumes:
      - application/json
      description: Create new Todo
      parameters:
      - description: Todo information
        in: body
        name: TodoInfo
        required: true
        schema:
          $ref: '#/definitions/model.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Create new Todo
      tags:
      - todo-manager-apis
  /work/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Todo with an ID specified
      parameters:
      - description: ID of the to be deleted Todo
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Delete a Todo
      tags:
      - todo-manager-apis
  /work/search/{id}:
    get:
      consumes:
      - application/json
      description: gets todo by its ID
      parameters:
      - description: ID of needed todo
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: gets todo by its ID
      tags:
      - todo-manager-apis
  /work/updater/{id}:
    put:
      consumes:
      - application/json
      description: Update an ID specified Todo
      parameters:
      - description: ID of the to be updated Todo
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateContent information
        in: body
        name: UpdateContent
        required: true
        schema:
          $ref: '#/definitions/model.Todo'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Update an ID specified Todo
      tags:
      - todo-manager-apis
swagger: "2.0"
